package fileTemplates.internal

import org.apache.hadoop.conf.Configuration
import org.apache.hadoop.fs.FileSystem
import org.apache.hadoop.fs.Path
import org.apache.hadoop.io.Text
import org.apache.hadoop.mapreduce.Job
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat

class ${NAME}Driver {
    fun main(args: Array<String>) {
        // System.setProperty("hadoop.tmp.dir", "")
        // System.setProperty("hadoop.home.dir", "")

        val conf = Configuration()
        val job = Job.getInstance(conf, "${NAME}Job");

        job.setJarByClass(${NAME}Driver::class.java)
        job.setMapperClass(${NAME}Mapper::class.java)
        job.setReducerClass(${NAME}Reducer::class.java)
        job.setCombinerClass(${NAME}Reducer::class.java)

        // TODO: specify output types
        job.setOutputKeyClass(Text::class.java)
        job.setOutputValueClass(Text::class.java)

        // TODO: specify input and output DIRECTORIES (not files)
        FileInputFormat.setInputPaths(job, Path("input"))
        FileOutputFormat.setOutputPath(job, Path("output"))

        val fs = FileSystem.get(conf)
        if (fs.exists(Path("output")))
            fs.delete(Path("output"), true)

        job.waitForCompletion(true)
    }
}